import { useState } from 'react';
import { css } from '@emotion/react';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import {
  collection,
  query,
  where,
  getDocs,
  doc,
  setDoc,
  getDoc,
} from 'firebase/firestore';
import Button from '@/components/Button';
import Header from '@/components/Header';
import InputBox from '@/components/InputBox';
import Toast from '@/components/Toast';
import ROUTES from '@/constants/route';
import { auth, db } from '@/firebase/firbaseConfig';
import useToast from '@/hooks/useToast';

export const SignUp = () => {
  const [id, setId] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [passwordConfirm, setPasswordConfirm] = useState<string>('');
  const [channelName, setChannelName] = useState<string>('');

  const [idCheckMessage, setIdCheckMessage] = useState<string>('');
  const [channelNameCheckMessage, setChannelNameCheckMessage] =
    useState<string>('');

  const [isIdChecked, setIsIdChecked] = useState<boolean>(false);
  const [isChannelNameChecked, setIsChannelNameChecked] =
    useState<boolean>(false);

  const { toastTrigger } = useToast();

  const checkChannelNameExists = async (
    channelName: string
  ): Promise<boolean> => {
    const q = query(
      collection(db, 'users'),
      where('channelName', '==', channelName)
    );

    try {
      const querySnapshot = await getDocs(q);
      return !querySnapshot.empty;
    } catch (error) {
      console.error('Ï±ÑÎÑê Ïù¥Î¶Ñ Ï§ëÎ≥µ Ï≤¥ÌÅ¨ Ïò§Î•ò:', error);
      throw new Error('Ï§ëÎ≥µ Ï≤¥ÌÅ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const checkIdExists = async (id: string): Promise<boolean> => {
    const q = query(collection(db, 'users'), where('id', '==', id));
    try {
      const docRef = doc(db, 'users', id);
      const docSnap = await getDoc(docRef);
      return docSnap.exists();
    } catch (error) {
      console.error('ÏïÑÏù¥Îîî Ï§ëÎ≥µ Ï≤¥ÌÅ¨ Ïò§Î•ò:', error);
      throw new Error('Ï§ëÎ≥µ Ï≤¥ÌÅ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const onIdCheck = async () => {
    try {
      const idExists = await checkIdExists(id);
      if (idExists) {
        setIdCheckMessage('Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ ÏïÑÏù¥ÎîîÏûÖÎãàÎã§.');
        setIsIdChecked(false);
      } else {
        setIdCheckMessage('ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏïÑÏù¥ÎîîÏûÖÎãàÎã§.');
        setIsIdChecked(true);
      }
    } catch (error) {
      console.log('ÏïÑÏù¥Îîî Ï§ëÎ≥µ Í≤ÄÏÇ¨ Ïò§Î•ò:', error);
    }
  };

  const onChannelNameCheck = async () => {
    try {
      const exists = await checkChannelNameExists(channelName.trim());
      if (exists) {
        setChannelNameCheckMessage('Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ Ï±ÑÎÑê Ïù¥Î¶ÑÏûÖÎãàÎã§.');
        setIsChannelNameChecked(false);
      } else {
        setChannelNameCheckMessage('ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ï±ÑÎÑê Ïù¥Î¶ÑÏûÖÎãàÎã§.');
        setIsChannelNameChecked(true);
      }
    } catch (error) {
      console.error('Ï±ÑÎÑê Ïù¥Î¶Ñ Ï§ëÎ≥µ Í≤ÄÏÇ¨ Ïò§Î•ò:', error);
    }
  };

  const onSignUp = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!isIdChecked || !isChannelNameChecked) {
      toastTrigger('Ï§ëÎ≥µ Í≤ÄÏÇ¨Î•º ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    const email = `${id}@gmail.com`;

    try {
      const idExists = await checkIdExists(id);
      if (idExists) {
        setIdCheckMessage('Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ ÏïÑÏù¥ÎîîÏûÖÎãàÎã§.');
        return;
      }

      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const { user } = userCredential;

      await setDoc(doc(db, 'users', id), {
        uid: user.uid,
        channelName,
        channelFollower: [],
        channelFollowing: [],
        savedPlaylist: [],
        likedPlaylist: [],
        profileImg: '',
        tags: [],
      });
      console.log('ÌöåÏõêÍ∞ÄÏûÖ Î∞è Firestore Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏÑ±Í≥µ:', user);
      toastTrigger('ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å!ü•≥ Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞Ä Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      setTimeout(() => {
        window.location.href = ROUTES.SIGN_IN;
      }, 2000);
    } catch (error) {
      console.error('ÌöåÏõêÍ∞ÄÏûÖ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    }
  };

  const validateId = (value: string) => {
    if (value.length < 5) {
      return 'ÏïÑÏù¥ÎîîÎäî 5ÏûêÎ¶¨ Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§';
    }
    return '';
  };

  const validatePassword = (value: string) => {
    const regex =
      /^(?=.*[!@#$%^&*(),.?":{}|<>])[A-Za-z\d!@#$%^&*(),.?":{}|<>]{5,}$/;
    if (!regex.test(value)) {
      return 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 5ÏûêÎ¶¨ Ïù¥ÏÉÅ, ÌäπÏàòÎ¨∏Ïûê(!,@,-,$,*)Ìè¨Ìï®Ïù¥Ïñ¥Ïïº Ìï©ÎãàÎã§';
    }
    return 'ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎπÑÎ∞ÄÎ≤àÌò∏ÏûÖÎãàÎã§.';
  };

  const validatePasswordConfirm = (value: string) => {
    if (value !== password) {
      return 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Îã§Î¶ÖÎãàÎã§';
    }
    return 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌï©ÎãàÎã§.';
  };

  const validateChannelName = (value: string) => {
    if (value.length < 2) {
      return 'Ï±ÑÎÑê Ïù¥Î¶ÑÏùÄ 2ÏûêÎ¶¨ Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§';
    }
    return '';
  };

  const isSignUpDisabled =
    id.length < 5 ||
    password.length < 5 ||
    passwordConfirm.length < 5 ||
    channelName.length < 2;

  return (
    <div css={containerStyle}>
      <Header type='detail' headerTitle='ÌöåÏõêÍ∞ÄÏûÖ' />
      <form onSubmit={onSignUp} css={signUpContainerStyle}>
        <div css={duplicateStyle}>
          <InputBox
            label='ÏïÑÏù¥Îîî'
            placeholder='ÏïÑÏù¥Îîî'
            value={id}
            validate={validateId}
            onChange={(e) => {
              setId(e.target.value);
            }}
            width='315px'
            externalErrorMessage={idCheckMessage}
          />
          <div style={{ marginLeft: `5px` }}>
            <Button
              label='Ï§ëÎ≥µÍ≤ÄÏÇ¨'
              color='gray'
              size='lg'
              onClick={onIdCheck}
            />
          </div>
        </div>
        <InputBox
          label='ÎπÑÎ∞ÄÎ≤àÌò∏'
          placeholder='ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
          value={password}
          validate={validatePassword}
          onChange={(e) => {
            setPassword(e.target.value);
          }}
          isPassword
        />
        <InputBox
          label='ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏'
          placeholder='ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏'
          value={passwordConfirm}
          validate={validatePasswordConfirm}
          onChange={(e) => {
            setPasswordConfirm(e.target.value);
          }}
          isPassword
        />
        <div css={duplicateStyle}>
          <InputBox
            label='Ï±ÑÎÑê Ïù¥Î¶Ñ'
            placeholder='Ï±ÑÎÑê Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî'
            value={channelName}
            validate={validateChannelName}
            onChange={(e) => {
              setChannelName(e.target.value);
            }}
            width='315px'
            externalErrorMessage={channelNameCheckMessage}
          />
          <div style={{ marginLeft: `5px` }}>
            <Button
              label='Ï§ëÎ≥µÍ≤ÄÏÇ¨'
              color='gray'
              onClick={onChannelNameCheck}
              size='lg'
            />
          </div>
        </div>
        <div style={{ width: `390px` }}>
          <Button
            label='ÌöåÏõêÍ∞ÄÏûÖ'
            onClick={() => {}}
            size='lg'
            type='submit'
            fullWidth={true}
            disabled={isSignUpDisabled}
          />
        </div>
      </form>
      <Toast />
    </div>
  );
};

const containerStyle = css`
  width: 100%;
  max-width: 430px;
  margin: 0 auto;
`;

const signUpContainerStyle = css`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
`;

const duplicateStyle = css`
  display: flex;
  align-items: center;
`;
